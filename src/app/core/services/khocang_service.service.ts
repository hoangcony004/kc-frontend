//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IKho_Cang_Service {
    /**
     * @return OK
     */
    apiPrivateUsersGet(id: number): Observable<ApiResponseSysUser>;
    /**
     * @param body (optional) 
     * @return OK
     */
    apiPrivateUsersPut(id: number, body: SysUser | undefined): Observable<ApiResponseSysUser>;
    /**
     * @return OK
     */
    apiPrivateUsersDelete(id: number): Observable<ApiResponseVoid>;
    /**
     * @param body (optional) 
     * @return OK
     */
    apiPrivateUsersPost(body: SysUser | undefined): Observable<ApiResponse>;
    /**
     * @return OK
     */
    apiLogin(body: LoginRequest): Observable<ApiResponseTokenResponse>;
    /**
     * @return OK
     */
    publicApiHello(): Observable<string>;
    /**
     * @return OK
     */
    apiPrivateUsersAll(): Observable<ApiResponseListSysUser>;
}

@Injectable({
    providedIn: 'root'
})
export class Kho_Cang_Service implements IKho_Cang_Service {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:6868";
    }

    /**
     * @return OK
     */
    apiPrivateUsersGet(id: number): Observable<ApiResponseSysUser> {
        let url_ = this.baseUrl + "/api/private/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseSysUser>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseSysUser>;
        }));
    }

    protected processApiPrivateUsersGet(response: HttpResponseBase): Observable<ApiResponseSysUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseSysUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponseSysUser>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    apiPrivateUsersPut(id: number, body: SysUser | undefined): Observable<ApiResponseSysUser> {
        let url_ = this.baseUrl + "/api/private/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersPut(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseSysUser>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseSysUser>;
        }));
    }

    protected processApiPrivateUsersPut(response: HttpResponseBase): Observable<ApiResponseSysUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseSysUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponseSysUser>(null as any);
    }

    /**
     * @return OK
     */
    apiPrivateUsersDelete(id: number): Observable<ApiResponseVoid> {
        let url_ = this.baseUrl + "/api/private/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseVoid>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseVoid>;
        }));
    }

    protected processApiPrivateUsersDelete(response: HttpResponseBase): Observable<ApiResponseVoid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseVoid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponseVoid>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    apiPrivateUsersPost(body: SysUser | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/private/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersPost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processApiPrivateUsersPost(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse>(null as any);
    }

    /**
     * @return OK
     */
    apiLogin(body: LoginRequest): Observable<ApiResponseTokenResponse> {
        let url_ = this.baseUrl + "/api/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "*/*"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseTokenResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseTokenResponse>;
        }));
    }

    protected processApiLogin(response: HttpResponseBase): Observable<ApiResponseTokenResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseTokenResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponseTokenResponse>(null as any);
    }

    /**
     * @return OK
     */
    publicApiHello(): Observable<string> {
        let url_ = this.baseUrl + "/public/api/hello";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPublicApiHello(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPublicApiHello(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processPublicApiHello(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    /**
     * @return OK
     */
    apiPrivateUsersAll(): Observable<ApiResponseListSysUser> {
        let url_ = this.baseUrl + "/api/private/users/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "*/*"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApiPrivateUsersAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApiPrivateUsersAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseListSysUser>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseListSysUser>;
        }));
    }

    protected processApiPrivateUsersAll(response: HttpResponseBase): Observable<ApiResponseListSysUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseListSysUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponseListSysUser>(null as any);
    }
}

export class SysUser implements ISysUser {
    id?: number;
    username?: string;
    password?: string;
    email?: string;
    phone?: string;
    status?: number;
    unitcode?: string;
    createdAt?: Date;

    [key: string]: any;

    constructor(data?: ISysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.status = _data["status"];
            this.unitcode = _data["unitcode"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUser {
        data = typeof data === 'object' ? data : {};
        let result = new SysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["status"] = this.status;
        data["unitcode"] = this.unitcode;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }

    clone(): SysUser {
        const json = this.toJSON();
        let result = new SysUser();
        result.init(json);
        return result;
    }
}

export interface ISysUser {
    id?: number;
    username?: string;
    password?: string;
    email?: string;
    phone?: string;
    status?: number;
    unitcode?: string;
    createdAt?: Date;

    [key: string]: any;
}

export class ApiResponseSysUser implements IApiResponseSysUser {
    status?: ApiResponseSysUserStatus;
    message?: string;
    code?: number;
    data?: SysUser;

    [key: string]: any;

    constructor(data?: IApiResponseSysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new SysUser(data.data) : <SysUser>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"] ? SysUser.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseSysUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseSysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApiResponseSysUser {
        const json = this.toJSON();
        let result = new ApiResponseSysUser();
        result.init(json);
        return result;
    }
}

export interface IApiResponseSysUser {
    status?: ApiResponseSysUserStatus;
    message?: string;
    code?: number;
    data?: ISysUser;

    [key: string]: any;
}

export class ApiResponse implements IApiResponse {
    status?: ApiResponseStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data;
        return data;
    }

    clone(): ApiResponse {
        const json = this.toJSON();
        let result = new ApiResponse();
        result.init(json);
        return result;
    }
}

export interface IApiResponse {
    status?: ApiResponseStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;
}

export class LoginRequest implements ILoginRequest {
    username?: string;
    password?: string;

    [key: string]: any;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }

    clone(): LoginRequest {
        const json = this.toJSON();
        let result = new LoginRequest();
        result.init(json);
        return result;
    }
}

export interface ILoginRequest {
    username?: string;
    password?: string;

    [key: string]: any;
}

export class ApiResponseTokenResponse implements IApiResponseTokenResponse {
    status?: ApiResponseTokenResponseStatus;
    message?: string;
    code?: number;
    data?: TokenResponse;

    [key: string]: any;

    constructor(data?: IApiResponseTokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new TokenResponse(data.data) : <TokenResponse>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"] ? TokenResponse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiResponseTokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseTokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApiResponseTokenResponse {
        const json = this.toJSON();
        let result = new ApiResponseTokenResponse();
        result.init(json);
        return result;
    }
}

export interface IApiResponseTokenResponse {
    status?: ApiResponseTokenResponseStatus;
    message?: string;
    code?: number;
    data?: ITokenResponse;

    [key: string]: any;
}

export class TokenResponse implements ITokenResponse {
    token?: string;
    menu?: string;

    [key: string]: any;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.token = _data["token"];
            this.menu = _data["menu"];
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["token"] = this.token;
        data["menu"] = this.menu;
        return data;
    }

    clone(): TokenResponse {
        const json = this.toJSON();
        let result = new TokenResponse();
        result.init(json);
        return result;
    }
}

export interface ITokenResponse {
    token?: string;
    menu?: string;

    [key: string]: any;
}

export class ApiResponseListSysUser implements IApiResponseListSysUser {
    status?: ApiResponseListSysUserStatus;
    message?: string;
    code?: number;
    data?: SysUser[];

    [key: string]: any;

    constructor(data?: IApiResponseListSysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new SysUser(item) : <SysUser>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUser.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApiResponseListSysUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseListSysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }

    clone(): ApiResponseListSysUser {
        const json = this.toJSON();
        let result = new ApiResponseListSysUser();
        result.init(json);
        return result;
    }
}

export interface IApiResponseListSysUser {
    status?: ApiResponseListSysUserStatus;
    message?: string;
    code?: number;
    data?: ISysUser[];

    [key: string]: any;
}

export class ApiResponseVoid implements IApiResponseVoid {
    status?: ApiResponseVoidStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;

    constructor(data?: IApiResponseVoid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status = _data["status"];
            this.message = _data["message"];
            this.code = _data["code"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ApiResponseVoid {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseVoid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status"] = this.status;
        data["message"] = this.message;
        data["code"] = this.code;
        data["data"] = this.data;
        return data;
    }

    clone(): ApiResponseVoid {
        const json = this.toJSON();
        let result = new ApiResponseVoid();
        result.init(json);
        return result;
    }
}

export interface IApiResponseVoid {
    status?: ApiResponseVoidStatus;
    message?: string;
    code?: number;
    data?: any;

    [key: string]: any;
}

export enum ApiResponseSysUserStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export enum ApiResponseStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export enum ApiResponseTokenResponseStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export enum ApiResponseListSysUserStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export enum ApiResponseVoidStatus {
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    INFO = "INFO",
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}